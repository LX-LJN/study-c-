#include <iostream>;
using namespace std;
#include <string>
#include<ctime>
struct inflatable
{
	char name[30];
	float volume;
	double price;
};

union Toger
{
	int A;
	long B;
	double C;
};


/* 多行注释*/

/*
一、基础知识

main 是一个程序入口 每个程序都必须有这么一个函数，有且只有一个

变量
变量创建的方法：数据类型 变量名=变量初始值；

常量
用于记录程序中不可更改的数据
1.#define 宏常量：通常在文件上定义，表示一个常量
2.const 修饰的变量：通常在变量定义前加关键字 const，修饰该变量为常量，不可修改

标识符
标识符命名规则
1.不能是关键字
2.由字母、数字、下划线构成
3.第一个字符只能是字母或下划线
它是区分大小写的

二、数据类型
 数据类型存在的意义：给变量分配合适的内存空间

 2.1整型
 short：短整型 2字节
 int 整型 4字节
 long 长整型 Windows为4字节 Linux为4字节（32位），8字节（64位）
 long long 长长整型 8字节

2.2 sizeof关键字
可以利用 sizeof 求出数据类型的占用内部空间的大小
语法：sizeof( 数据类型 / 变量)`

2.3实型（浮点型）
用于表示小数
浮点型变量分为两种：
1. 单精度float
2. 双精度double

两者的区别在于表示的有效数字范围不同。
| float        | 4字节        | 7位有效数字      |
| double       | 8字节        | 15～16位有效数字 |

2.4字符型
作用：字符型变量用于显示单个字符
语法：`char ch = 'a';`

> 注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号

> 注意2：单引号内只能有一个字符，不可以是字符串

C和C++中字符型变量只占用1个字节。
字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元

2.5转义字符
作用：用于表示一些不能显示出来的ASCII字符
我们常用的转义字符有：` \n  \\  \t`

2.6字符串型
用于表示一串字符
它有两种写法/风格
C风格字符串 char 变量名[] = "字符串值"
C++风格字符串  `string  变量名 = "字符串值"

2.7 布尔类型 bool
布尔数据类型代表真或假的值
bool类型只有两个值：
 true  --- 真（本质是1）
 false --- 假（本质是0）
bool类型占==1个字节

2.8 数据的输入

用于从键盘获取数据
关键字：cin
语法：cin >> 变量

三、运算符

| 算术运算符     | 用于处理四则运算                       |
| 赋值运算符     | 用于将表达式的值赋给变量               |
| 比较运算符     | 用于表达式的比较，并返回一个真值或假值 |
| 逻辑运算符     | 用于根据表达式的值返回真值或假值       |

3.1 算术运算符
用于处理四则运算
 运算符      | 术语       | 示例        | 结果      |
| ---------- | ---------- | ----------- | --------- |
| +          | 正号       | +3          | 3         |
| -          | 负号       | -3          | -3        |
| +          | 加         | 10 + 5      | 15        |
| -          | 减         | 10 - 5      | 5         |
| *          | 乘         | 10 * 5      | 50        |
| /          | 除         | 10 / 5      | 2         |
| %          | 取模(取余) | 10 % 3      | 1         | 等同于高中学的VB中的的mod，整除取余数
| ++         | 前置递增   | a=2; b=++a; | a=3; b=3; |
| ++         | 后置递增   | a=2; b=a++; | a=3; b=2; |
| --         | 前置递减   | a=2; b=--a; | a=1; b=1; |
| --         | 后置递减   | a=2; b=a--; | a=1; b=2; |

3.2 赋值运算符
用于将表达式的值赋给变量
| 运算符     | 术语     | 示例       | 结果      |
| ---------- | -------- | ---------- | --------- |
| =          | 赋值     | a=2; b=3;  | a=2; b=3; |
| +=         | 加等于   | a=0; a+=2; | a=2;      | 等同于a=a+2
| -=         | 减等于   | a=5; a-=3; | a=2;      | 等同于a=a-3
| *=         | 乘等于   | a=2; a*=2; | a=4;      | 跟上方同理
| /=         | 除等于   | a=4; a/=2; | a=2;      |
| %=         | 模等于   | a=3; a%2;  | a=1;      |

 3.3 比较运算符
用于表达式的比较，并返回一个真值或假值
| 运算符     | 术语     | 示例     | 结果     |
| ---------- | -------- | -------- | -------- |
| ==         | 相等于   | 4 == 3   | 0        |
| !=         | 不等于   | 4 != 3   | 1        |
| <          | 小于     | 4 < 3    | 0        |
| >          | 大于     | 4 > 3    | 1        |
| <=         | 小于等于 | 4 <= 3   | 0        |
| >=         | 大于等于 | 4 >= 1   | 1        |
注意：C和C++ 语言的比较运算中， “真”用数字“1”来表示， “假”用数字“0”来表示。


3.4 逻辑运算符
用于根据表达式的值返回真值或假值
| 运算符     |     术语 |     示例 |                     结果                                 |
| ---------- | -------- | -------- | -------------------------------------------------------- |
| !          | 非       | !a       | 如果a为假，则!a为真；  如果a为真，则!a为假。             | 取反
| &&         | 与       | a && b   | 如果a和b都为真，则结果为真，否则为假。                   | 可类比成乘法，真为1，假为0，真真=1*1=1=真，真假=1*0=0=假，假假=0*0=0=假（同真为真，其余为假）
| ||         | 或       | a || b   | 如果a和b有一个为真，则结果为真，二者都为假时，结果为假。 | 可类比成加法，真为1，假为0，真真=1+1=2<>0=真，真假=1+0=1>0=真，假假=0+0=0=假（同假为假，其余为真）


四、程序流程结构
三种程序运行结构：顺序结构、选择结构、循环结构

* 顺序结构：程序按顺序执行，不发生跳转
* 选择结构：依据条件是否满足，有选择的执行相应功能
* 循环结构：依据条件是否满足，循环多次执行某段代码

4.1.1 if语句

执行满足条件的语句

if语句的三种形式
* 单行格式if语句
* 多行格式if语句
* 多条件的if语句
注意：if条件表达式后不要加分号

 4.1.2 三目运算符

通过三目运算符实现简单的判断
语法：表达式1 ? 表达式2 ：表达式3`
如果表达式1的值为真，执行表达式2，并返回表达式2的结果；
如果表达式1的值为假，执行表达式3，并返回表达式3的结果。

4.1.3 switch语句
执行多条件分支语句


4.2 循环结构

4.2.1 while循环语句
满足循环条件，执行循环语句
语法： while(循环条件){ 循环语句 }`
只要循环条件的结果为真，就执行循环语句

4.2.2 do...while循环语句

满足循环条件，执行循环语句
语法:`do{ 循环语句 } while(循环条件);`
与while的区别在于==do...while会先执行一次循环语句==，再判断循环条件

4.2.3 for循环语句
满足循环条件，执行循环语句

4.2.4 嵌套循环

在循环体中再嵌套一层循环，解决一些实际问题
语法：for(起始表达式;条件表达式;末尾循环体) { 循环语句; }`

4.3 跳转语句

4.3.1 break语句

用于跳出选择结构或者循环结构
break使用的时机：
* 出现在switch条件语句中，作用是终止case并跳出switch
* 出现在循环语句中，作用是跳出当前的循环语句
* 出现在嵌套循环中，跳出最近的内层循环语句

4.3.2 continue语句
在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环

4.3.3 goto语句
可以无条件跳转语句
语法:goto 标记;
如果标记的名称存在，执行到goto语句时，会跳转到标记的位置
注意：在程序中不建议使用goto语句，以免造成程序流程混乱

5 数组
 5.1 概述
所谓数组，就是一个集合，里面存放了相同类型的数据元素
特点1：数组中的每个==数据元素都是相同的数据类型
特点2：数组是由连续的内存位置组成的

5.2 一维数组
5.2.1 一维数组定义方式
一维数组定义的三种方式：
1. ` 数据类型  数组名[ 数组长度 ];
2. `数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};
3. `数据类型  数组名[ ] = { 值1，值2 ...};

5.2.2 一维数组数组名

一维数组名称的用途
1. 可以统计整个数组在内存中的长度
2. 可以获取数组在内存中的首地址

5.2.3 冒泡排序（与VB中的写法类似）
最常用的排序算法，对数组内元素进行排序
1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。
2. 对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。
3. 重复以上的步骤，每次比较次数-1，直到不需要比较

5.3 二维数组
二维数组就是在一维数组上，多加一个维度。

5.3.1 二维数组定义方式
二维数组定义的四种方式：
1. ` 数据类型  数组名[ 行数 ][ 列数 ]; `
2. `数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };`
3. `数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};`
4. ` 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};`

*/



int main()
{
	/*
	int a = 10;//变量 不要用关键字给变量或者常量起名称
	cout <<"a="<< a <<endl;//输出变量
	cout << "hello world"<< endl;

	int Day=7;
	cout<< "一周一共有："<<Day<<"天"<<endl;
	const int month = 12;// const 修饰的变量也是常量
	cout<< "一年一共有："<<month<<"年"<<endl;
*/

/*
float F1 = 3.1415926 ;
cout << F1 << endl;

char ch = 'a';
cout << ch << endl;
cout << sizeof(char) << endl;

cout << "\\" << endl;
cout << "\tHello" << endl;
cout << "\n" << endl;

char str1[] = "hello world";
cout << str1 << endl;//C的字符串写法

string str = "hello world";
cout << str << endl;//C++写法 需要加入头文件 #include <string>

bool flag = true;
cout << flag << endl; // 1

flag = false;
cout << flag << endl; // 0
*/

/* int a=0;
cout << "输入一个值A:" << endl;
cin >> a ;
cout <<"该A的倍数值为"<<  a*2 << endl;

float F =3.14f;
cout <<"输入一个值F"<<endl;
cin >> F;
cout << "F的值为：" <<F<< endl;
*/

/*
//四则运算
int a1 = 10;
int b1 = 3;

cout << a1 + b1 << endl;
cout << a1 - b1 << endl;
cout << a1 * b1 << endl;
cout << a1 / b1 << endl;  //两个整数相除结果依然是整数

int a2 = 10;
int b2 = 20;
cout << a2 / b2 << endl;

int a3 = 10;
int b3 = 0;
//cout << a3 / b3 << endl; //报错，除数不可以为0


//两个小数可以相除
double d1 = 0.5;
double d2 = 0.25;
cout << d1 / d2 << endl;//运算的结果也可以是小数
*/

/*
//取模 (取余）
int a1 = 10;
int b1 = 3;

cout << 10 % 3 << endl;

int a2 = 10;
int b2 = 20;

cout << a2 % b2 << endl;

int a3 = 10;
int b3 = 0;

//cout << a3 % b3 << endl; //取模运算时，除数也不能为0

//两个小数不可以取模
double d1 = 3.14;
double d2 = 1.1;

//cout << d1 % d2 << endl;
*/

/*
//后置递增
int a = 10;
a++; //等价于a = a + 1
cout << a << endl; // 11

//前置递增
int b = 10;
++b;
cout << b << endl; // 11

//区别
//前置递增先对变量进行++，再计算表达式
int a2 = 10;
int b2 = ++a2 * 10;
cout << b2 << endl;

//后置递增先计算表达式，后对变量进行++
int a3 = 10;
int b3 = a3++ * 10;
cout << b3 << endl;
*/

// 嵌IF套语句

	/*
	int score = 0;

	cout << "请输入考试分数：" << endl;

	cin >> score;

	if (score > 600)
	{
		cout << "我考上了一本大学" << endl;
		if (score > 700)
		{
			cout << "我考上了北大" << endl;
		}
		else if (score > 650)
		{
			cout << "我考上了清华" << endl;
		}
		else
		{
			cout << "我考上了人大" << endl;
		}

	}
	else if (score > 500)
	{
		cout << "我考上了二本大学" << endl;
	}
	else if (score > 400)
	{
		cout << "我考上了三本大学" << endl;
	}
	else
	{
		cout << "我未考上本科" << endl;
	}
	*/
	/*
	 int a = 10;
	 int b = 20;
	 int c = 0;

	 c = a > b ? a : b;
	 cout << "c = " << c << endl;//输出的结果为20

	 //C++中三目运算符返回的是变量,可以继续赋值

	 (a > b ? a : b) = 100;

	 cout << "a = " << a << endl;//输出的结果为10
	 cout << "b = " << b << endl;//输出的结果为100
	 cout << "c = " << c << endl;//输出的结果为20
	 */
	 /*
	 int A = 0;
	 cout << "输入一个10以内的数"<< endl;
	 cin >> A;
	 switch (A)
	 {
		 case 10:
		 case 9:
			 cout<<"优秀"<< endl;
		 break;
		 case 8:
		 case 7:
			 cout <<"良好"<< endl;
			 break;
		 case 6:
			 cout <<"及格"<< endl;
			 break;
		 default:
			 cout << "不及格"<< endl;
		 break;
	 }
	 */

	 //随机数判断大小小游戏 （while循环）
	 /*
	 srand((unsigned int )time(NULL));
	 int num= rand()%100+1;
	 int val=0;

	 while( 1 )
	 {
		 cin >> val;
		 if (val > num )
		 {
			 cout<<"大了"<<endl;
		 }
		 else if(val < num)
		 {
			 cout<<"小了"<<endl;
		 }
		 else
		 {
			 cout<<"猜对了"<< endl;
			 break;
		 }
	 }
	 */
	 // do...while 语句寻找水仙花数
	 /*
	 int num = 100;
	 do
	 {
		 int a = 0;
		 int b = 0;
		 int c = 0;

		 a = num%10;
		 b = num/10%10;
		 c = num/100;
	 if ( a*a*a + b*b*b + c*c*c==num)
	 {
		 cout << num <<endl;
	 }
		 num++;
	 }
	 while(num<1000);
	 */
	 //for 循环语句 敲桌子游戏 6的倍数以及包含6的数字的100以内的数字以敲桌子代替
	 /*
	 for(int i=0;i<100;i++)
	 {
		 if (i%10==6||i%6==0||i/10==6)
		 {
			 cout<<"敲桌子"<<endl;
		 }
		 else
		 {
			 cout<<i<<endl;
		 }
	 }
	 */
	 //嵌套循环
	 /*
	 for(int i=0;i<10;i++)
	 {
		 for(int j=0;j<10;j++)
		 {
			 cout <<"* " ;
		 }
		 cout<< endl;
	 }
	 */

	 //九九乘法表
	 /*
	 for(int i=1;i<=9;i++)
	 {
		 for(int j=1;j<=i;j++)
		 {
			 cout<<i<<"*"<<j<<"="<<i*j<<" ";
		 }
		 cout <<endl;
	 }
	 */

	 /*
	 //数组名用途
		 //1、可以获取整个数组占用内存空间大小
		 int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };

		 cout << "整个数组所占内存空间为： " << sizeof(arr) << endl;
		 cout << "每个元素所占内存空间为： " << sizeof(arr[0]) << endl;
		 cout << "数组的元素个数为： " << sizeof(arr) / sizeof(arr[0]) << endl;

		 //2、可以通过数组名获取到数组首地址
		 cout << "数组首地址为： " << (int)arr << endl;
		 cout << "数组中第一个元素地址为： " << (int)&arr[0] << endl;
		 cout << "数组中第二个元素地址为： " << (int)&arr[1] << endl;

		 //arr = 100; 错误，数组名是常量，因此不可以赋值
		 */

		 //冒泡排序
		 /*
			 int arr[9] = { 4,2,8,0,5,7,1,3,9 };

			 for (int i = 0; i < 9 - 1; i++)
			 {
				 for (int j = 0; j < 9 - 1 - i; j++)
				 {
					 if (arr[j] > arr[j + 1])
					 {
						 int temp = arr[j];
						 arr[j] = arr[j + 1];
						 arr[j + 1] = temp;
					 }
				 }
			 }

			 for (int i = 0; i < 9; i++)
			 {
				 cout << " "  << arr[i] << "" ;
			 }
			 cout << endl;
			 */

			 //二维数组应用
/*
	int scores[3][3] =
	{
		{100,100,100}, 
		{90,50,100},
		{60,70,80},
	};

	string names[3] = { "张三","李四","王五" };

	for (int i = 0; i < 3; i++)
	{
		int sum = 0;
		for (int j = 0; j < 3; j++)
		{
			sum += scores[i][j];
		}
		cout << names[i] << "同学总成绩为： " << sum << endl;
	}
	*/


	/*
	int arr[] = {1, 2, 3, 4, 5};
	int * p = arr;

	for (int i = 0; i <=5; i++)

	{
		cout << *p << endl;
		p++;
	}
	*/

// 结构数组
/*
inflatable guests[2] =
{
	{"Bambi",0.8,21.55},
	{"Kate",1.2,3.67}
};
cout << guests[0].name << guests[1].name << endl;
cout << guests[0].price << guests[1].volume << endl;
*/
// 共同体
/*
Toger D;
D.A = 15;
cout << D.A << endl;
D.B = 2555;
cout << D.B << endl;
D.C = 2.3;
cout << D.C << endl;
*/

double ww[3] = { 1000.0,2000.0, 3000.0 };
short ss[3] = { 3,2,1 };
double* pw = ww;
cout << "pw =" << pw << ", *pw=" << *pw << endl;

pw = pw + 1;
cout << "pw =" << pw << ", *pw=" << *pw << endl;

	system("pause");
	return 0;
}